@page "/"
@using System.Timers
@using Markdig
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JsRuntime;
@inject HttpClient Http


<PageTitle>MarkDown</PageTitle>

<h1>Markdown Editor</h1>

<div style="display: flex; flex-direction: row;">
    <div style="margin-right: 20px; width: 50%;">
        <label for="markdownInput">Markdown Input:</label>
        <textarea id="markdownInput" @bind="@MarkdownText" @oninput="UpdateOutput" style="width: 100%; min-height: 400px; resize: vertical;" rows="10"></textarea>
    </div>
    <div style="width: 50%;">
        <label>Preview:</label>
        <div>
            <iframe id="previewFrame" srcdoc="@RenderHtml()" style="border: solid #26b050; width: 100%; height: 400px;"></iframe>
        </div>
    </div>
</div>

<button class="btn btn-primary" @onclick="ShowMarkdown">JDownload</button>
<button class="btn btn-primary" @onclick="ShowMarkdown2">GDownload</button>


@code {
    private string? MarkdownText = "";
    private Timer previewTimer;
    private string lastMarkdownText;

    private async Task ShowMarkdown()
    {
        string renderHtml = RenderHtml();
        await Http.PostAsJsonAsync("download123", new StringContent(renderHtml));
    }

    private async Task ShowMarkdown2()
    {
        string renderHtml = RenderHtml();
        await JsRuntime.InvokeVoidAsync("triggerFilePutDownload", Http.BaseAddress + "download", null, new { html = renderHtml});
    }

    private string RenderHtml()
    {
        string html = Markdown.ToHtml(MarkdownText);
        return $"<html><head><style>* {{ font-family: sans-serif; }}</style></head><body>{html}</body></html>";
    }


    private async Task UpdateOutput(ChangeEventArgs args)
    {
        MarkdownText = args.Value.ToString();
        await Task.Delay(1);
        StateHasChanged();
    }
}
