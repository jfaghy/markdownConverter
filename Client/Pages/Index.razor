@page "/"
@using System.Timers
@using Markdig
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JsRuntime;
@inject HttpClient Http


<PageTitle>MarkDown</PageTitle>

<h1>Markdown Editor</h1>

<div style="display: flex; flex-direction: row;">
    <div style="margin-right: 20px; width: 50%;">
        <label for="columnOneInput">Column1:</label>
        <textarea id="columnOneInput" @bind="@Column1Text" @oninput="UpdateColumn1" style="width: 100%; min-height: 400px; resize: vertical;" rows="10"></textarea>
    </div>
    <div style="margin-right: 20px; width: 50%;">
        <label for="columnTwoInput">Column2:</label>
        <textarea id="columnTwoInput" @bind="@Column2Text" @oninput="UpdateColumn2" style="width: 100%; min-height: 400px; resize: vertical;" rows="10"></textarea>
    </div>
    <div style="width: 50%;">
        <label>Preview:</label>
        <div>
            <iframe id="previewFrame1" srcdoc="@RenderColumn1()" style="width: 100%; height: 800px;"></iframe>
        </div>
    </div>
    <div style="width: 50%;">
        <div>
            <iframe id="previewFrame2" srcdoc="@RenderColumn2()" style="width: 100%; height: 800px;"></iframe>
        </div>
    </div>
</div>

<button class="btn btn-primary" @onclick="Dink">Download Dink</button>
<button class="btn btn-primary" @onclick="NReco">Download NReco</button>
<button class="btn btn-primary" @onclick="FakeHappy">Download FakeHappy</button>
<button class="btn btn-primary" @onclick="DinkJS">Download JS</button>



@code {
    private string? Column1Text = "";
    private string? Column2Text = "";
    private Timer previewTimer;
    private string lastMarkdownText;

    private async Task Dink()
    {
        string column1 = RenderColumn1();
        string column2 = RenderColumn2();
        await JsRuntime.InvokeVoidAsync("triggerFilePutDownload", Http.BaseAddress + "downloaddink", null, new { Column1 = column1, Column2 = column2 });
    }

    private async Task DinkJS()
    {
        string column1 = RenderColumn1();
        string column2 = RenderColumn2();
        await JsRuntime.InvokeVoidAsync("triggerFilePutDownload", Http.BaseAddress + "downloaddinkjs", null, new { Column1 = column1, Column2 = column2 });
    }

    private async Task NReco()
    {
        string column1 = RenderColumn1();
        string column2 = RenderColumn2();
        await JsRuntime.InvokeVoidAsync("triggerFilePutDownload", Http.BaseAddress + "downloadnreco", null, new { Column1 = column1, Column2 = column2 });
    }

    private async Task FakeHappy()
    {
        string column1 = RenderColumn1();
        string column2 = RenderColumn2();
        await JsRuntime.InvokeVoidAsync("triggerFilePutDownload", Http.BaseAddress + "downloadfakehappy", null, new { Column1 = column1, Column2 = column2 });
    }

    private string RenderColumn1()
    {
        string html = Markdown.ToHtml(Column1Text);
        return html;
    }

    private string RenderColumn2()
    {
        string html = Markdown.ToHtml(Column2Text);
        return html;
    }

    private async Task UpdateColumn1(ChangeEventArgs args)
    {
        Column1Text = args.Value.ToString();
        await Task.Delay(1);
        StateHasChanged();
    }

    private async Task UpdateColumn2(ChangeEventArgs args)
    {
        Column2Text = args.Value.ToString();
        await Task.Delay(1);
        StateHasChanged();
    }
}
